// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 1.1.4322.2032
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

// 
//This source code was auto-generated by MonoXSD
//
namespace Supos {
    using System;
    using System.Collections;
    using System.ComponentModel;
    using System.Data;
    using System.Runtime.Serialization;
    using System.Xml;
    
    
    public class SuposDataSet : System.Data.DataSet, System.Xml.Serialization.IXmlSerializable {
        
        public delegate void CategoriesRowChangedEventHandler(object o, CategoriesRowChangedEventArgs e);
        
        public delegate void ProductsRowChangedEventHandler(object o, ProductsRowChangedEventArgs e);
        
        public delegate void TaxesRowChangedEventHandler(object o, TaxesRowChangedEventArgs e);
        
        public delegate void CustomersRowChangedEventHandler(object o, CustomersRowChangedEventArgs e);
        
        public delegate void OrdersRowChangedEventHandler(object o, OrdersRowChangedEventArgs e);
        
        public delegate void OrderDetailsRowChangedEventHandler(object o, OrderDetailsRowChangedEventArgs e);
        
        public delegate void PaymentsRowChangedEventHandler(object o, PaymentsRowChangedEventArgs e);
        
        public delegate void MetaRowChangedEventHandler(object o, MetaRowChangedEventArgs e);
        
        private CategoriesDataTable __tableCategories;
        
        private ProductsDataTable __tableProducts;
        
        private TaxesDataTable __tableTaxes;
        
        private CustomersDataTable __tableCustomers;
        
        private OrdersDataTable __tableOrders;
        
        private OrderDetailsDataTable __tableOrderDetails;
        
        private PaymentsDataTable __tablePayments;
        
        private MetaDataTable __tableMeta;
        
        private System.Data.DataRelation __relationFK_Orders_OrderDetailsRelation;
        
        private System.Data.DataRelation __relationPK_Products_OrderDetailsRelation;
        
        private System.Data.DataRelation __relationPK_Taxes_OrderDetailsRelation;
        
        private System.Data.DataRelation __relationFK_Customers_OrdersRelation;
        
        private System.Data.DataRelation __relationFK_Categories_ProductsRelation;
        
        private System.Data.DataRelation __relationFK_Taxes_ProductsRelation;
        
        private System.Data.DataRelation __relationR_Taxes_OrdersRelation;
        
        private System.Data.DataRelation __relationR_Payments_OrdersRelation;
        
        public SuposDataSet() {
            this.InitializeClass();
            System.ComponentModel.CollectionChangeEventHandler handler = new System.ComponentModel.CollectionChangeEventHandler(new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged));
            this.Tables.CollectionChanged += handler;
            this.Relations.CollectionChanged += handler;
        }
        
        protected SuposDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext ctx) {
            // TODO: implement
            throw new System.NotImplementedException();
        }
        
        public virtual CategoriesDataTable Categories {
            get {
                return this.__tableCategories;
            }
        }
        
        public virtual ProductsDataTable Products {
            get {
                return this.__tableProducts;
            }
        }
        
        public virtual TaxesDataTable Taxes {
            get {
                return this.__tableTaxes;
            }
        }
        
        public virtual CustomersDataTable Customers {
            get {
                return this.__tableCustomers;
            }
        }
        
        public virtual OrdersDataTable Orders {
            get {
                return this.__tableOrders;
            }
        }
        
        public virtual OrderDetailsDataTable OrderDetails {
            get {
                return this.__tableOrderDetails;
            }
        }
        
        public virtual PaymentsDataTable Payments {
            get {
                return this.__tablePayments;
            }
        }
        
        public virtual MetaDataTable Meta {
            get {
                return this.__tableMeta;
            }
        }
        
        public virtual System.Data.DataRelation FK_Orders_OrderDetailsRelation {
            get {
                return this.__relationFK_Orders_OrderDetailsRelation;
            }
        }
        
        public virtual System.Data.DataRelation PK_Products_OrderDetailsRelation {
            get {
                return this.__relationPK_Products_OrderDetailsRelation;
            }
        }
        
        public virtual System.Data.DataRelation PK_Taxes_OrderDetailsRelation {
            get {
                return this.__relationPK_Taxes_OrderDetailsRelation;
            }
        }
        
        public virtual System.Data.DataRelation FK_Customers_OrdersRelation {
            get {
                return this.__relationFK_Customers_OrdersRelation;
            }
        }
        
        public virtual System.Data.DataRelation FK_Categories_ProductsRelation {
            get {
                return this.__relationFK_Categories_ProductsRelation;
            }
        }
        
        public virtual System.Data.DataRelation FK_Taxes_ProductsRelation {
            get {
                return this.__relationFK_Taxes_ProductsRelation;
            }
        }
        
        public virtual System.Data.DataRelation R_Taxes_OrdersRelation {
            get {
                return this.__relationR_Taxes_OrdersRelation;
            }
        }
        
        public virtual System.Data.DataRelation R_Payments_OrdersRelation {
            get {
                return this.__relationR_Payments_OrdersRelation;
            }
        }
        
        public override System.Data.DataSet Clone() {
            SuposDataSet set = ((SuposDataSet)(base.Clone()));
            set.InitializeFields();
            return set;
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.StringWriter sw = new System.IO.StringWriter();
            this.WriteXmlSchema(sw);
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(new System.IO.StringReader(sw.ToString())), null);
        }
        
        System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() {
            return this.GetSchemaSerializable();
        }
        
        internal void InitializeClass() {
            this.DataSetName = "SuposDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TestDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("fr-BE");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.__tableCategories = new CategoriesDataTable();
            this.Tables.Add(this.__tableCategories);
            this.__tableProducts = new ProductsDataTable();
            this.Tables.Add(this.__tableProducts);
            this.__tableTaxes = new TaxesDataTable();
            this.Tables.Add(this.__tableTaxes);
            this.__tableCustomers = new CustomersDataTable();
            this.Tables.Add(this.__tableCustomers);
            this.__tableOrders = new OrdersDataTable();
            this.Tables.Add(this.__tableOrders);
            this.__tableOrderDetails = new OrderDetailsDataTable();
            this.Tables.Add(this.__tableOrderDetails);
            this.__tablePayments = new PaymentsDataTable();
            this.Tables.Add(this.__tablePayments);
            this.__tableMeta = new MetaDataTable();
            this.Tables.Add(this.__tableMeta);
            System.Data.UniqueConstraint uc;
            uc = new System.Data.UniqueConstraint("PK_Categories", new System.Data.DataColumn[] {
                        this.__tableCategories.Columns["Id"]}, true);
            this.__tableCategories.Constraints.Add(uc);
            uc = new System.Data.UniqueConstraint("PK_Products", new System.Data.DataColumn[] {
                        this.__tableProducts.Columns["Id"]}, true);
            this.__tableProducts.Constraints.Add(uc);
            uc = new System.Data.UniqueConstraint("PK_Taxes", new System.Data.DataColumn[] {
                        this.__tableTaxes.Columns["Id"]}, true);
            this.__tableTaxes.Constraints.Add(uc);
            uc = new System.Data.UniqueConstraint("PK_Clients", new System.Data.DataColumn[] {
                        this.__tableCustomers.Columns["Id"]}, true);
            this.__tableCustomers.Constraints.Add(uc);
            uc = new System.Data.UniqueConstraint("PK_Orders", new System.Data.DataColumn[] {
                        this.__tableOrders.Columns["Id"]}, true);
            this.__tableOrders.Constraints.Add(uc);
            uc = new System.Data.UniqueConstraint("PK_OrderDetails", new System.Data.DataColumn[] {
                        this.__tableOrderDetails.Columns["Id"]}, true);
            this.__tableOrderDetails.Constraints.Add(uc);
            uc = new System.Data.UniqueConstraint("PK_Payment", new System.Data.DataColumn[] {
                        this.__tablePayments.Columns["Id"]}, true);
            this.__tablePayments.Constraints.Add(uc);
            uc = new System.Data.UniqueConstraint("PK_Meta", new System.Data.DataColumn[] {
                        this.__tableMeta.Columns["Id"]}, true);
            this.__tableMeta.Constraints.Add(uc);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("FK_Categories_Products", new System.Data.DataColumn[] {
                        this.__tableCategories.Columns["Id"]}, new System.Data.DataColumn[] {
                        this.__tableProducts.Columns["CategoryId"]});
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.__tableProducts.Constraints.Add(fkc);
            fkc = new System.Data.ForeignKeyConstraint("FK_Taxes_Products", new System.Data.DataColumn[] {
                        this.__tableTaxes.Columns["Id"]}, new System.Data.DataColumn[] {
                        this.__tableProducts.Columns["DefaultTaxId"]});
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.__tableProducts.Constraints.Add(fkc);
            fkc = new System.Data.ForeignKeyConstraint("FK_Customers_Orders", new System.Data.DataColumn[] {
                        this.__tableCustomers.Columns["Id"]}, new System.Data.DataColumn[] {
                        this.__tableOrders.Columns["CustomerId"]});
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.__tableOrders.Constraints.Add(fkc);
            fkc = new System.Data.ForeignKeyConstraint("FK_Orders_OrderDetails", new System.Data.DataColumn[] {
                        this.__tableOrders.Columns["Id"]}, new System.Data.DataColumn[] {
                        this.__tableOrderDetails.Columns["OrderId"]});
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.__tableOrderDetails.Constraints.Add(fkc);
            fkc = new System.Data.ForeignKeyConstraint("PK_Products_OrderDetails", new System.Data.DataColumn[] {
                        this.__tableProducts.Columns["Id"]}, new System.Data.DataColumn[] {
                        this.__tableOrderDetails.Columns["ProductId"]});
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.__tableOrderDetails.Constraints.Add(fkc);
            fkc = new System.Data.ForeignKeyConstraint("PK_Taxes_OrderDetails", new System.Data.DataColumn[] {
                        this.__tableTaxes.Columns["Id"]}, new System.Data.DataColumn[] {
                        this.__tableOrderDetails.Columns["TaxId"]});
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.__tableOrderDetails.Constraints.Add(fkc);
            this.__relationFK_Orders_OrderDetailsRelation = new System.Data.DataRelation("FK_Orders_OrderDetails", new System.Data.DataColumn[] {
                        this.__tableOrders.Columns["Id"]}, new System.Data.DataColumn[] {
                        this.__tableOrderDetails.Columns["OrderId"]}, false);
            this.__relationFK_Orders_OrderDetailsRelation.Nested = false;
            this.Relations.Add(this.__relationFK_Orders_OrderDetailsRelation);
            this.__relationPK_Products_OrderDetailsRelation = new System.Data.DataRelation("PK_Products_OrderDetails", new System.Data.DataColumn[] {
                        this.__tableProducts.Columns["Id"]}, new System.Data.DataColumn[] {
                        this.__tableOrderDetails.Columns["ProductId"]}, false);
            this.__relationPK_Products_OrderDetailsRelation.Nested = false;
            this.Relations.Add(this.__relationPK_Products_OrderDetailsRelation);
            this.__relationPK_Taxes_OrderDetailsRelation = new System.Data.DataRelation("PK_Taxes_OrderDetails", new System.Data.DataColumn[] {
                        this.__tableTaxes.Columns["Id"]}, new System.Data.DataColumn[] {
                        this.__tableOrderDetails.Columns["TaxId"]}, false);
            this.__relationPK_Taxes_OrderDetailsRelation.Nested = false;
            this.Relations.Add(this.__relationPK_Taxes_OrderDetailsRelation);
            this.__relationFK_Customers_OrdersRelation = new System.Data.DataRelation("FK_Customers_Orders", new System.Data.DataColumn[] {
                        this.__tableCustomers.Columns["Id"]}, new System.Data.DataColumn[] {
                        this.__tableOrders.Columns["CustomerId"]}, false);
            this.__relationFK_Customers_OrdersRelation.Nested = false;
            this.Relations.Add(this.__relationFK_Customers_OrdersRelation);
            this.__relationFK_Categories_ProductsRelation = new System.Data.DataRelation("FK_Categories_Products", new System.Data.DataColumn[] {
                        this.__tableCategories.Columns["Id"]}, new System.Data.DataColumn[] {
                        this.__tableProducts.Columns["CategoryId"]}, false);
            this.__relationFK_Categories_ProductsRelation.Nested = false;
            this.Relations.Add(this.__relationFK_Categories_ProductsRelation);
            this.__relationFK_Taxes_ProductsRelation = new System.Data.DataRelation("FK_Taxes_Products", new System.Data.DataColumn[] {
                        this.__tableTaxes.Columns["Id"]}, new System.Data.DataColumn[] {
                        this.__tableProducts.Columns["DefaultTaxId"]}, false);
            this.__relationFK_Taxes_ProductsRelation.Nested = false;
            this.Relations.Add(this.__relationFK_Taxes_ProductsRelation);
            this.__relationR_Taxes_OrdersRelation = new System.Data.DataRelation("R_Taxes_Orders", new System.Data.DataColumn[] {
                        this.__tableTaxes.Columns["Id"]}, new System.Data.DataColumn[] {
                        this.__tableOrders.Columns["TaxId"]}, false);
            this.__relationR_Taxes_OrdersRelation.Nested = false;
            this.Relations.Add(this.__relationR_Taxes_OrdersRelation);
            this.__relationR_Payments_OrdersRelation = new System.Data.DataRelation("R_Payments_Orders", new System.Data.DataColumn[] {
                        this.__tablePayments.Columns["Id"]}, new System.Data.DataColumn[] {
                        this.__tableOrders.Columns["PaymentId"]}, false);
            this.__relationR_Payments_OrdersRelation.Nested = false;
            this.Relations.Add(this.__relationR_Payments_OrdersRelation);
        }
        
        internal void InitializeFields() {
            this.__tableCategories.InitializeFields();
            this.__tableProducts.InitializeFields();
            this.__tableTaxes.InitializeFields();
            this.__tableCustomers.InitializeFields();
            this.__tableOrders.InitializeFields();
            this.__tableOrderDetails.InitializeFields();
            this.__tablePayments.InitializeFields();
            this.__tableMeta.InitializeFields();
            this.__relationFK_Orders_OrderDetailsRelation = this.Relations["FK_Orders_OrderDetails"];
            this.__relationPK_Products_OrderDetailsRelation = this.Relations["PK_Products_OrderDetails"];
            this.__relationPK_Taxes_OrderDetailsRelation = this.Relations["PK_Taxes_OrderDetails"];
            this.__relationFK_Customers_OrdersRelation = this.Relations["FK_Customers_Orders"];
            this.__relationFK_Categories_ProductsRelation = this.Relations["FK_Categories_Products"];
            this.__relationFK_Taxes_ProductsRelation = this.Relations["FK_Taxes_Products"];
            this.__relationR_Taxes_OrdersRelation = this.Relations["R_Taxes_Orders"];
            this.__relationR_Payments_OrdersRelation = this.Relations["R_Payments_Orders"];
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitializeFields();
            }
        }
        
        public class CategoriesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn __columnId;
            
            private System.Data.DataColumn __columnName;
            
            private System.Data.DataColumn __columnIcon;
            
            internal CategoriesDataTable() : 
                    base("Categories") {
                this.InitializeClass();
                this.InitializeFields();
            }
            
            internal CategoriesDataTable(System.Data.DataTable tableCategories) : 
                    base(tableCategories.TableName) {
                // TODO: implement
                throw new System.NotImplementedException();
            }
            
            public virtual int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public virtual CategoriesRow this[int i] {
                get {
                    return ((CategoriesRow)(this.Rows[i]));
                }
            }
            
            internal System.Data.DataColumn IdColumn {
                get {
                    return this.__columnId;
                }
            }
            
            internal System.Data.DataColumn NameColumn {
                get {
                    return this.__columnName;
                }
            }
            
            internal System.Data.DataColumn IconColumn {
                get {
                    return this.__columnIcon;
                }
            }
            
            public event CategoriesRowChangedEventHandler CategoriesRowChanging;
            
            public event CategoriesRowChangedEventHandler CategoriesRowChanged;
            
            public event CategoriesRowChangedEventHandler CategoriesRowDeleting;
            
            public event CategoriesRowChangedEventHandler CategoriesRowDeleted;
            
            private void InitializeClass() {
                this.Columns.Add(new System.Data.DataColumn("Id", typeof(long)));
                this.Columns.Add(new System.Data.DataColumn("Name", typeof(string)));
                this.Columns.Add(new System.Data.DataColumn("Icon", typeof(string)));
            }
            
            internal void InitializeFields() {
                this.__columnId = this.Columns["Id"];
                this.__columnId.AllowDBNull = false;
                this.__columnId.AutoIncrement = true;
                this.__columnId.AutoIncrementSeed = 1;
                this.__columnName = this.Columns["Name"];
                this.__columnIcon = this.Columns["Icon"];
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                CategoriesDataTable t = ((CategoriesDataTable)(base.Clone()));
                t.InitializeFields();
                return t;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new CategoriesDataTable();
            }
            
            public virtual void AddCategoriesRow(CategoriesRow row) {
                this.Rows.Add(row);
            }
            
            public virtual CategoriesRow AddCategoriesRow(long Id, string Name, string Icon) {
                CategoriesRow row = this.NewCategoriesRow();
                row["Id"] = Id;
                row["Name"] = Name;
                row["Icon"] = Icon;
                this.Rows.Add(row);
                return row;
            }
            
            public virtual CategoriesRow NewCategoriesRow() {
                return ((CategoriesRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CategoriesRow(builder);
            }
            
            public virtual void RemoveCategoriesRow(CategoriesRow row) {
                this.Rows.Remove(row);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CategoriesRow);
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CategoriesRowChanging != null)) {
                    this.CategoriesRowChanging(this, new CategoriesRowChangedEventArgs(((CategoriesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CategoriesRowChanged != null)) {
                    this.CategoriesRowChanged(this, new CategoriesRowChangedEventArgs(((CategoriesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CategoriesRowDeleting != null)) {
                    this.CategoriesRowDeleting(this, new CategoriesRowChangedEventArgs(((CategoriesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CategoriesRowDeleted != null)) {
                    this.CategoriesRowDeleted(this, new CategoriesRowChangedEventArgs(((CategoriesRow)(e.Row)), e.Action));
                }
            }
        }
        
        public class CategoriesRow : System.Data.DataRow {
            
            private CategoriesDataTable tableCategories;
            
            internal CategoriesRow(System.Data.DataRowBuilder builder) : 
                    base(builder) {
                this.tableCategories = ((CategoriesDataTable)(this.Table));
            }
            
            public virtual long Id {
                get {
                    object ret = this[this.tableCategories.IdColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((long)(ret));
                    }
                }
                set {
                    this[this.tableCategories.IdColumn] = value;
                }
            }
            
            public virtual string Name {
                get {
                    object ret = this[this.tableCategories.NameColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((string)(ret));
                    }
                }
                set {
                    this[this.tableCategories.NameColumn] = value;
                }
            }
            
            public virtual string Icon {
                get {
                    object ret = this[this.tableCategories.IconColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((string)(ret));
                    }
                }
                set {
                    this[this.tableCategories.IconColumn] = value;
                }
            }
            
            public virtual bool IsIdNull() {
                return this.IsNull(this.tableCategories.IdColumn);
            }
            
            public virtual void SetIdNull() {
                this[this.tableCategories.IdColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsNameNull() {
                return this.IsNull(this.tableCategories.NameColumn);
            }
            
            public virtual void SetNameNull() {
                this[this.tableCategories.NameColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsIconNull() {
                return this.IsNull(this.tableCategories.IconColumn);
            }
            
            public virtual void SetIconNull() {
                this[this.tableCategories.IconColumn] = System.DBNull.Value;
            }
            
            public virtual ProductsRow[] GetProductsRows() {
                return ((ProductsRow[])(this.GetChildRows(this.Table.DataSet.Relations["FK_Categories_Products"])));
            }
        }
        
        public class CategoriesRowChangedEventArgs : System.EventArgs {
            
            private CategoriesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public CategoriesRowChangedEventArgs(CategoriesRow r, System.Data.DataRowAction a) {
                this.eventRow = r;
                this.eventAction = a;
            }
            
            public CategoriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class ProductsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn __columnId;
            
            private System.Data.DataColumn __columnCategoryId;
            
            private System.Data.DataColumn __columnName;
            
            private System.Data.DataColumn __columnIcon;
            
            private System.Data.DataColumn __columnDefaultTaxId;
            
            private System.Data.DataColumn __columnPrice;
            
            internal ProductsDataTable() : 
                    base("Products") {
                this.InitializeClass();
                this.InitializeFields();
            }
            
            internal ProductsDataTable(System.Data.DataTable tableProducts) : 
                    base(tableProducts.TableName) {
                // TODO: implement
                throw new System.NotImplementedException();
            }
            
            public virtual int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public virtual ProductsRow this[int i] {
                get {
                    return ((ProductsRow)(this.Rows[i]));
                }
            }
            
            internal System.Data.DataColumn IdColumn {
                get {
                    return this.__columnId;
                }
            }
            
            internal System.Data.DataColumn CategoryIdColumn {
                get {
                    return this.__columnCategoryId;
                }
            }
            
            internal System.Data.DataColumn NameColumn {
                get {
                    return this.__columnName;
                }
            }
            
            internal System.Data.DataColumn IconColumn {
                get {
                    return this.__columnIcon;
                }
            }
            
            internal System.Data.DataColumn DefaultTaxIdColumn {
                get {
                    return this.__columnDefaultTaxId;
                }
            }
            
            internal System.Data.DataColumn PriceColumn {
                get {
                    return this.__columnPrice;
                }
            }
            
            public event ProductsRowChangedEventHandler ProductsRowChanging;
            
            public event ProductsRowChangedEventHandler ProductsRowChanged;
            
            public event ProductsRowChangedEventHandler ProductsRowDeleting;
            
            public event ProductsRowChangedEventHandler ProductsRowDeleted;
            
            private void InitializeClass() {
                this.Columns.Add(new System.Data.DataColumn("Id", typeof(long)));
                this.Columns.Add(new System.Data.DataColumn("CategoryId", typeof(long)));
                this.Columns.Add(new System.Data.DataColumn("Name", typeof(string)));
                this.Columns.Add(new System.Data.DataColumn("Icon", typeof(string)));
                this.Columns.Add(new System.Data.DataColumn("DefaultTaxId", typeof(long)));
                this.Columns.Add(new System.Data.DataColumn("Price", typeof(System.Decimal)));
            }
            
            internal void InitializeFields() {
                this.__columnId = this.Columns["Id"];
                this.__columnId.AllowDBNull = false;
                this.__columnId.AutoIncrement = true;
                this.__columnId.AutoIncrementSeed = -1;
                this.__columnId.AutoIncrementStep = -1;
                this.__columnCategoryId = this.Columns["CategoryId"];
                this.__columnCategoryId.AllowDBNull = false;
                this.__columnName = this.Columns["Name"];
                this.__columnIcon = this.Columns["Icon"];
                this.__columnDefaultTaxId = this.Columns["DefaultTaxId"];
                this.__columnPrice = this.Columns["Price"];
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                ProductsDataTable t = ((ProductsDataTable)(base.Clone()));
                t.InitializeFields();
                return t;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new ProductsDataTable();
            }
            
            public virtual void AddProductsRow(ProductsRow row) {
                this.Rows.Add(row);
            }
            
            public virtual ProductsRow AddProductsRow(long Id, long CategoryId, string Name, string Icon, long DefaultTaxId, System.Decimal Price) {
                ProductsRow row = this.NewProductsRow();
                row["Id"] = Id;
                row["CategoryId"] = CategoryId;
                row["Name"] = Name;
                row["Icon"] = Icon;
                row["DefaultTaxId"] = DefaultTaxId;
                row["Price"] = Price;
                this.Rows.Add(row);
                return row;
            }
            
            public virtual ProductsRow NewProductsRow() {
                return ((ProductsRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ProductsRow(builder);
            }
            
            public virtual void RemoveProductsRow(ProductsRow row) {
                this.Rows.Remove(row);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProductsRow);
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductsRowChanging != null)) {
                    this.ProductsRowChanging(this, new ProductsRowChangedEventArgs(((ProductsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductsRowChanged != null)) {
                    this.ProductsRowChanged(this, new ProductsRowChangedEventArgs(((ProductsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductsRowDeleting != null)) {
                    this.ProductsRowDeleting(this, new ProductsRowChangedEventArgs(((ProductsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductsRowDeleted != null)) {
                    this.ProductsRowDeleted(this, new ProductsRowChangedEventArgs(((ProductsRow)(e.Row)), e.Action));
                }
            }
        }
        
        public class ProductsRow : System.Data.DataRow {
            
            private ProductsDataTable tableProducts;
            
            internal ProductsRow(System.Data.DataRowBuilder builder) : 
                    base(builder) {
                this.tableProducts = ((ProductsDataTable)(this.Table));
            }
            
            public virtual long Id {
                get {
                    object ret = this[this.tableProducts.IdColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((long)(ret));
                    }
                }
                set {
                    this[this.tableProducts.IdColumn] = value;
                }
            }
            
            public virtual long CategoryId {
                get {
                    object ret = this[this.tableProducts.CategoryIdColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((long)(ret));
                    }
                }
                set {
                    this[this.tableProducts.CategoryIdColumn] = value;
                }
            }
            
            public virtual string Name {
                get {
                    object ret = this[this.tableProducts.NameColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((string)(ret));
                    }
                }
                set {
                    this[this.tableProducts.NameColumn] = value;
                }
            }
            
            public virtual string Icon {
                get {
                    object ret = this[this.tableProducts.IconColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((string)(ret));
                    }
                }
                set {
                    this[this.tableProducts.IconColumn] = value;
                }
            }
            
            public virtual long DefaultTaxId {
                get {
                    object ret = this[this.tableProducts.DefaultTaxIdColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((long)(ret));
                    }
                }
                set {
                    this[this.tableProducts.DefaultTaxIdColumn] = value;
                }
            }
            
            public virtual System.Decimal Price {
                get {
                    object ret = this[this.tableProducts.PriceColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((System.Decimal)(ret));
                    }
                }
                set {
                    this[this.tableProducts.PriceColumn] = value;
                }
            }
            
            public virtual CategoriesRow CategoriesRow {
                get {
                    return ((CategoriesRow)(this.GetParentRow(this.Table.DataSet.Relations["FK_Categories_Products"])));
                }
                set {
                    this.SetParentRow(value, this.Table.DataSet.Relations["FK_Categories_Products"]);
                }
            }
            
            public virtual TaxesRow TaxesRow {
                get {
                    return ((TaxesRow)(this.GetParentRow(this.Table.DataSet.Relations["FK_Taxes_Products"])));
                }
                set {
                    this.SetParentRow(value, this.Table.DataSet.Relations["FK_Taxes_Products"]);
                }
            }
            
            public virtual bool IsIdNull() {
                return this.IsNull(this.tableProducts.IdColumn);
            }
            
            public virtual void SetIdNull() {
                this[this.tableProducts.IdColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsCategoryIdNull() {
                return this.IsNull(this.tableProducts.CategoryIdColumn);
            }
            
            public virtual void SetCategoryIdNull() {
                this[this.tableProducts.CategoryIdColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsNameNull() {
                return this.IsNull(this.tableProducts.NameColumn);
            }
            
            public virtual void SetNameNull() {
                this[this.tableProducts.NameColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsIconNull() {
                return this.IsNull(this.tableProducts.IconColumn);
            }
            
            public virtual void SetIconNull() {
                this[this.tableProducts.IconColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsDefaultTaxIdNull() {
                return this.IsNull(this.tableProducts.DefaultTaxIdColumn);
            }
            
            public virtual void SetDefaultTaxIdNull() {
                this[this.tableProducts.DefaultTaxIdColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsPriceNull() {
                return this.IsNull(this.tableProducts.PriceColumn);
            }
            
            public virtual void SetPriceNull() {
                this[this.tableProducts.PriceColumn] = System.DBNull.Value;
            }
            
            public virtual OrderDetailsRow[] GetOrderDetailsRows() {
                return ((OrderDetailsRow[])(this.GetChildRows(this.Table.DataSet.Relations["PK_Products_OrderDetails"])));
            }
        }
        
        public class ProductsRowChangedEventArgs : System.EventArgs {
            
            private ProductsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public ProductsRowChangedEventArgs(ProductsRow r, System.Data.DataRowAction a) {
                this.eventRow = r;
                this.eventAction = a;
            }
            
            public ProductsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class TaxesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn __columnId;
            
            private System.Data.DataColumn __columnName;
            
            private System.Data.DataColumn __columnRate;
            
            private System.Data.DataColumn __columnOverrideable;
            
            internal TaxesDataTable() : 
                    base("Taxes") {
                this.InitializeClass();
                this.InitializeFields();
            }
            
            internal TaxesDataTable(System.Data.DataTable tableTaxes) : 
                    base(tableTaxes.TableName) {
                // TODO: implement
                throw new System.NotImplementedException();
            }
            
            public virtual int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public virtual TaxesRow this[int i] {
                get {
                    return ((TaxesRow)(this.Rows[i]));
                }
            }
            
            internal System.Data.DataColumn IdColumn {
                get {
                    return this.__columnId;
                }
            }
            
            internal System.Data.DataColumn NameColumn {
                get {
                    return this.__columnName;
                }
            }
            
            internal System.Data.DataColumn RateColumn {
                get {
                    return this.__columnRate;
                }
            }
            
            internal System.Data.DataColumn OverrideableColumn {
                get {
                    return this.__columnOverrideable;
                }
            }
            
            public event TaxesRowChangedEventHandler TaxesRowChanging;
            
            public event TaxesRowChangedEventHandler TaxesRowChanged;
            
            public event TaxesRowChangedEventHandler TaxesRowDeleting;
            
            public event TaxesRowChangedEventHandler TaxesRowDeleted;
            
            private void InitializeClass() {
                this.Columns.Add(new System.Data.DataColumn("Id", typeof(long)));
                this.Columns.Add(new System.Data.DataColumn("Name", typeof(string)));
                this.Columns.Add(new System.Data.DataColumn("Rate", typeof(System.Decimal)));
                this.Columns.Add(new System.Data.DataColumn("Overrideable", typeof(bool)));
            }
            
            internal void InitializeFields() {
                this.__columnId = this.Columns["Id"];
                this.__columnId.AllowDBNull = false;
                this.__columnId.AutoIncrement = true;
                this.__columnId.AutoIncrementSeed = -1;
                this.__columnId.AutoIncrementStep = -1;
                this.__columnName = this.Columns["Name"];
                this.__columnRate = this.Columns["Rate"];
                this.__columnOverrideable = this.Columns["Overrideable"];
                this.__columnOverrideable.AllowDBNull = false;
                this.__columnOverrideable.DefaultValue = true;
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                TaxesDataTable t = ((TaxesDataTable)(base.Clone()));
                t.InitializeFields();
                return t;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new TaxesDataTable();
            }
            
            public virtual void AddTaxesRow(TaxesRow row) {
                this.Rows.Add(row);
            }
            
            public virtual TaxesRow AddTaxesRow(long Id, string Name, System.Decimal Rate, bool Overrideable) {
                TaxesRow row = this.NewTaxesRow();
                row["Id"] = Id;
                row["Name"] = Name;
                row["Rate"] = Rate;
                row["Overrideable"] = Overrideable;
                this.Rows.Add(row);
                return row;
            }
            
            public virtual TaxesRow NewTaxesRow() {
                return ((TaxesRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TaxesRow(builder);
            }
            
            public virtual void RemoveTaxesRow(TaxesRow row) {
                this.Rows.Remove(row);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TaxesRow);
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TaxesRowChanging != null)) {
                    this.TaxesRowChanging(this, new TaxesRowChangedEventArgs(((TaxesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TaxesRowChanged != null)) {
                    this.TaxesRowChanged(this, new TaxesRowChangedEventArgs(((TaxesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TaxesRowDeleting != null)) {
                    this.TaxesRowDeleting(this, new TaxesRowChangedEventArgs(((TaxesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TaxesRowDeleted != null)) {
                    this.TaxesRowDeleted(this, new TaxesRowChangedEventArgs(((TaxesRow)(e.Row)), e.Action));
                }
            }
        }
        
        public class TaxesRow : System.Data.DataRow {
            
            private TaxesDataTable tableTaxes;
            
            internal TaxesRow(System.Data.DataRowBuilder builder) : 
                    base(builder) {
                this.tableTaxes = ((TaxesDataTable)(this.Table));
            }
            
            public virtual long Id {
                get {
                    object ret = this[this.tableTaxes.IdColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((long)(ret));
                    }
                }
                set {
                    this[this.tableTaxes.IdColumn] = value;
                }
            }
            
            public virtual string Name {
                get {
                    object ret = this[this.tableTaxes.NameColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((string)(ret));
                    }
                }
                set {
                    this[this.tableTaxes.NameColumn] = value;
                }
            }
            
            public virtual System.Decimal Rate {
                get {
                    object ret = this[this.tableTaxes.RateColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((System.Decimal)(ret));
                    }
                }
                set {
                    this[this.tableTaxes.RateColumn] = value;
                }
            }
            
            public virtual bool Overrideable {
                get {
                    object ret = this[this.tableTaxes.OverrideableColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((bool)(ret));
                    }
                }
                set {
                    this[this.tableTaxes.OverrideableColumn] = value;
                }
            }
            
            public virtual bool IsIdNull() {
                return this.IsNull(this.tableTaxes.IdColumn);
            }
            
            public virtual void SetIdNull() {
                this[this.tableTaxes.IdColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsNameNull() {
                return this.IsNull(this.tableTaxes.NameColumn);
            }
            
            public virtual void SetNameNull() {
                this[this.tableTaxes.NameColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsRateNull() {
                return this.IsNull(this.tableTaxes.RateColumn);
            }
            
            public virtual void SetRateNull() {
                this[this.tableTaxes.RateColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsOverrideableNull() {
                return this.IsNull(this.tableTaxes.OverrideableColumn);
            }
            
            public virtual void SetOverrideableNull() {
                this[this.tableTaxes.OverrideableColumn] = System.DBNull.Value;
            }
            
            public virtual OrderDetailsRow[] GetOrderDetailsRows() {
                return ((OrderDetailsRow[])(this.GetChildRows(this.Table.DataSet.Relations["PK_Taxes_OrderDetails"])));
            }
            
            public virtual ProductsRow[] GetProductsRows() {
                return ((ProductsRow[])(this.GetChildRows(this.Table.DataSet.Relations["FK_Taxes_Products"])));
            }
            
            public virtual OrdersRow[] GetOrdersRows() {
                return ((OrdersRow[])(this.GetChildRows(this.Table.DataSet.Relations["R_Taxes_Orders"])));
            }
        }
        
        public class TaxesRowChangedEventArgs : System.EventArgs {
            
            private TaxesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public TaxesRowChangedEventArgs(TaxesRow r, System.Data.DataRowAction a) {
                this.eventRow = r;
                this.eventAction = a;
            }
            
            public TaxesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class CustomersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn __columnId;
            
            private System.Data.DataColumn __columnName;
            
            internal CustomersDataTable() : 
                    base("Customers") {
                this.InitializeClass();
                this.InitializeFields();
            }
            
            internal CustomersDataTable(System.Data.DataTable tableCustomers) : 
                    base(tableCustomers.TableName) {
                // TODO: implement
                throw new System.NotImplementedException();
            }
            
            public virtual int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public virtual CustomersRow this[int i] {
                get {
                    return ((CustomersRow)(this.Rows[i]));
                }
            }
            
            internal System.Data.DataColumn IdColumn {
                get {
                    return this.__columnId;
                }
            }
            
            internal System.Data.DataColumn NameColumn {
                get {
                    return this.__columnName;
                }
            }
            
            public event CustomersRowChangedEventHandler CustomersRowChanging;
            
            public event CustomersRowChangedEventHandler CustomersRowChanged;
            
            public event CustomersRowChangedEventHandler CustomersRowDeleting;
            
            public event CustomersRowChangedEventHandler CustomersRowDeleted;
            
            private void InitializeClass() {
                this.Columns.Add(new System.Data.DataColumn("Id", typeof(long)));
                this.Columns.Add(new System.Data.DataColumn("Name", typeof(string)));
            }
            
            internal void InitializeFields() {
                this.__columnId = this.Columns["Id"];
                this.__columnId.AllowDBNull = false;
                this.__columnId.AutoIncrement = true;
                this.__columnId.AutoIncrementSeed = -1;
                this.__columnId.AutoIncrementStep = -1;
                this.__columnName = this.Columns["Name"];
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                CustomersDataTable t = ((CustomersDataTable)(base.Clone()));
                t.InitializeFields();
                return t;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new CustomersDataTable();
            }
            
            public virtual void AddCustomersRow(CustomersRow row) {
                this.Rows.Add(row);
            }
            
            public virtual CustomersRow AddCustomersRow(long Id, string Name) {
                CustomersRow row = this.NewCustomersRow();
                row["Id"] = Id;
                row["Name"] = Name;
                this.Rows.Add(row);
                return row;
            }
            
            public virtual CustomersRow NewCustomersRow() {
                return ((CustomersRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CustomersRow(builder);
            }
            
            public virtual void RemoveCustomersRow(CustomersRow row) {
                this.Rows.Remove(row);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CustomersRow);
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomersRowChanging != null)) {
                    this.CustomersRowChanging(this, new CustomersRowChangedEventArgs(((CustomersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomersRowChanged != null)) {
                    this.CustomersRowChanged(this, new CustomersRowChangedEventArgs(((CustomersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomersRowDeleting != null)) {
                    this.CustomersRowDeleting(this, new CustomersRowChangedEventArgs(((CustomersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomersRowDeleted != null)) {
                    this.CustomersRowDeleted(this, new CustomersRowChangedEventArgs(((CustomersRow)(e.Row)), e.Action));
                }
            }
        }
        
        public class CustomersRow : System.Data.DataRow {
            
            private CustomersDataTable tableCustomers;
            
            internal CustomersRow(System.Data.DataRowBuilder builder) : 
                    base(builder) {
                this.tableCustomers = ((CustomersDataTable)(this.Table));
            }
            
            public virtual long Id {
                get {
                    object ret = this[this.tableCustomers.IdColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((long)(ret));
                    }
                }
                set {
                    this[this.tableCustomers.IdColumn] = value;
                }
            }
            
            public virtual string Name {
                get {
                    object ret = this[this.tableCustomers.NameColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((string)(ret));
                    }
                }
                set {
                    this[this.tableCustomers.NameColumn] = value;
                }
            }
            
            public virtual bool IsIdNull() {
                return this.IsNull(this.tableCustomers.IdColumn);
            }
            
            public virtual void SetIdNull() {
                this[this.tableCustomers.IdColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsNameNull() {
                return this.IsNull(this.tableCustomers.NameColumn);
            }
            
            public virtual void SetNameNull() {
                this[this.tableCustomers.NameColumn] = System.DBNull.Value;
            }
            
            public virtual OrdersRow[] GetOrdersRows() {
                return ((OrdersRow[])(this.GetChildRows(this.Table.DataSet.Relations["FK_Customers_Orders"])));
            }
        }
        
        public class CustomersRowChangedEventArgs : System.EventArgs {
            
            private CustomersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public CustomersRowChangedEventArgs(CustomersRow r, System.Data.DataRowAction a) {
                this.eventRow = r;
                this.eventAction = a;
            }
            
            public CustomersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class OrdersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn __columnId;
            
            private System.Data.DataColumn __columnCustomerId;
            
            private System.Data.DataColumn __columnPaymentId;
            
            private System.Data.DataColumn __columnTaxId;
            
            internal OrdersDataTable() : 
                    base("Orders") {
                this.InitializeClass();
                this.InitializeFields();
            }
            
            internal OrdersDataTable(System.Data.DataTable tableOrders) : 
                    base(tableOrders.TableName) {
                // TODO: implement
                throw new System.NotImplementedException();
            }
            
            public virtual int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public virtual OrdersRow this[int i] {
                get {
                    return ((OrdersRow)(this.Rows[i]));
                }
            }
            
            internal System.Data.DataColumn IdColumn {
                get {
                    return this.__columnId;
                }
            }
            
            internal System.Data.DataColumn CustomerIdColumn {
                get {
                    return this.__columnCustomerId;
                }
            }
            
            internal System.Data.DataColumn PaymentIdColumn {
                get {
                    return this.__columnPaymentId;
                }
            }
            
            internal System.Data.DataColumn TaxIdColumn {
                get {
                    return this.__columnTaxId;
                }
            }
            
            public event OrdersRowChangedEventHandler OrdersRowChanging;
            
            public event OrdersRowChangedEventHandler OrdersRowChanged;
            
            public event OrdersRowChangedEventHandler OrdersRowDeleting;
            
            public event OrdersRowChangedEventHandler OrdersRowDeleted;
            
            private void InitializeClass() {
                this.Columns.Add(new System.Data.DataColumn("Id", typeof(string)));
                this.Columns.Add(new System.Data.DataColumn("CustomerId", typeof(long)));
                this.Columns.Add(new System.Data.DataColumn("PaymentId", typeof(long)));
                this.Columns.Add(new System.Data.DataColumn("TaxId", typeof(long)));
            }
            
            internal void InitializeFields() {
                this.__columnId = this.Columns["Id"];
                this.__columnId.AllowDBNull = false;
                this.__columnId.AutoIncrementSeed = -1;
                this.__columnId.AutoIncrementStep = -1;
                this.__columnCustomerId = this.Columns["CustomerId"];
                this.__columnPaymentId = this.Columns["PaymentId"];
                this.__columnTaxId = this.Columns["TaxId"];
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                OrdersDataTable t = ((OrdersDataTable)(base.Clone()));
                t.InitializeFields();
                return t;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new OrdersDataTable();
            }
            
            public virtual void AddOrdersRow(OrdersRow row) {
                this.Rows.Add(row);
            }
            
            public virtual OrdersRow AddOrdersRow(string Id, long CustomerId, long PaymentId, long TaxId) {
                OrdersRow row = this.NewOrdersRow();
                row["Id"] = Id;
                row["CustomerId"] = CustomerId;
                row["PaymentId"] = PaymentId;
                row["TaxId"] = TaxId;
                this.Rows.Add(row);
                return row;
            }
            
            public virtual OrdersRow NewOrdersRow() {
                return ((OrdersRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OrdersRow(builder);
            }
            
            public virtual void RemoveOrdersRow(OrdersRow row) {
                this.Rows.Remove(row);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OrdersRow);
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrdersRowChanging != null)) {
                    this.OrdersRowChanging(this, new OrdersRowChangedEventArgs(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrdersRowChanged != null)) {
                    this.OrdersRowChanged(this, new OrdersRowChangedEventArgs(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrdersRowDeleting != null)) {
                    this.OrdersRowDeleting(this, new OrdersRowChangedEventArgs(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrdersRowDeleted != null)) {
                    this.OrdersRowDeleted(this, new OrdersRowChangedEventArgs(((OrdersRow)(e.Row)), e.Action));
                }
            }
        }
        
        public class OrdersRow : System.Data.DataRow {
            
            private OrdersDataTable tableOrders;
            
            internal OrdersRow(System.Data.DataRowBuilder builder) : 
                    base(builder) {
                this.tableOrders = ((OrdersDataTable)(this.Table));
            }
            
            public virtual string Id {
                get {
                    object ret = this[this.tableOrders.IdColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((string)(ret));
                    }
                }
                set {
                    this[this.tableOrders.IdColumn] = value;
                }
            }
            
            public virtual long CustomerId {
                get {
                    object ret = this[this.tableOrders.CustomerIdColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((long)(ret));
                    }
                }
                set {
                    this[this.tableOrders.CustomerIdColumn] = value;
                }
            }
            
            public virtual long PaymentId {
                get {
                    object ret = this[this.tableOrders.PaymentIdColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((long)(ret));
                    }
                }
                set {
                    this[this.tableOrders.PaymentIdColumn] = value;
                }
            }
            
            public virtual long TaxId {
                get {
                    object ret = this[this.tableOrders.TaxIdColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((long)(ret));
                    }
                }
                set {
                    this[this.tableOrders.TaxIdColumn] = value;
                }
            }
            
            public virtual CustomersRow CustomersRow {
                get {
                    return ((CustomersRow)(this.GetParentRow(this.Table.DataSet.Relations["FK_Customers_Orders"])));
                }
                set {
                    this.SetParentRow(value, this.Table.DataSet.Relations["FK_Customers_Orders"]);
                }
            }
            
            public virtual TaxesRow TaxesRow {
                get {
                    return ((TaxesRow)(this.GetParentRow(this.Table.DataSet.Relations["R_Taxes_Orders"])));
                }
                set {
                    this.SetParentRow(value, this.Table.DataSet.Relations["R_Taxes_Orders"]);
                }
            }
            
            public virtual PaymentsRow PaymentsRow {
                get {
                    return ((PaymentsRow)(this.GetParentRow(this.Table.DataSet.Relations["R_Payments_Orders"])));
                }
                set {
                    this.SetParentRow(value, this.Table.DataSet.Relations["R_Payments_Orders"]);
                }
            }
            
            public virtual bool IsIdNull() {
                return this.IsNull(this.tableOrders.IdColumn);
            }
            
            public virtual void SetIdNull() {
                this[this.tableOrders.IdColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsCustomerIdNull() {
                return this.IsNull(this.tableOrders.CustomerIdColumn);
            }
            
            public virtual void SetCustomerIdNull() {
                this[this.tableOrders.CustomerIdColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsPaymentIdNull() {
                return this.IsNull(this.tableOrders.PaymentIdColumn);
            }
            
            public virtual void SetPaymentIdNull() {
                this[this.tableOrders.PaymentIdColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsTaxIdNull() {
                return this.IsNull(this.tableOrders.TaxIdColumn);
            }
            
            public virtual void SetTaxIdNull() {
                this[this.tableOrders.TaxIdColumn] = System.DBNull.Value;
            }
            
            public virtual OrderDetailsRow[] GetOrderDetailsRows() {
                return ((OrderDetailsRow[])(this.GetChildRows(this.Table.DataSet.Relations["FK_Orders_OrderDetails"])));
            }
        }
        
        public class OrdersRowChangedEventArgs : System.EventArgs {
            
            private OrdersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public OrdersRowChangedEventArgs(OrdersRow r, System.Data.DataRowAction a) {
                this.eventRow = r;
                this.eventAction = a;
            }
            
            public OrdersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class OrderDetailsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn __columnId;
            
            private System.Data.DataColumn __columnProductId;
            
            private System.Data.DataColumn __columnPrice;
            
            private System.Data.DataColumn __columnQuantity;
            
            private System.Data.DataColumn __columnOrderId;
            
            private System.Data.DataColumn __columnTaxId;
            
            internal OrderDetailsDataTable() : 
                    base("OrderDetails") {
                this.InitializeClass();
                this.InitializeFields();
            }
            
            internal OrderDetailsDataTable(System.Data.DataTable tableOrderDetails) : 
                    base(tableOrderDetails.TableName) {
                // TODO: implement
                throw new System.NotImplementedException();
            }
            
            public virtual int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public virtual OrderDetailsRow this[int i] {
                get {
                    return ((OrderDetailsRow)(this.Rows[i]));
                }
            }
            
            internal System.Data.DataColumn IdColumn {
                get {
                    return this.__columnId;
                }
            }
            
            internal System.Data.DataColumn ProductIdColumn {
                get {
                    return this.__columnProductId;
                }
            }
            
            internal System.Data.DataColumn PriceColumn {
                get {
                    return this.__columnPrice;
                }
            }
            
            internal System.Data.DataColumn QuantityColumn {
                get {
                    return this.__columnQuantity;
                }
            }
            
            internal System.Data.DataColumn OrderIdColumn {
                get {
                    return this.__columnOrderId;
                }
            }
            
            internal System.Data.DataColumn TaxIdColumn {
                get {
                    return this.__columnTaxId;
                }
            }
            
            public event OrderDetailsRowChangedEventHandler OrderDetailsRowChanging;
            
            public event OrderDetailsRowChangedEventHandler OrderDetailsRowChanged;
            
            public event OrderDetailsRowChangedEventHandler OrderDetailsRowDeleting;
            
            public event OrderDetailsRowChangedEventHandler OrderDetailsRowDeleted;
            
            private void InitializeClass() {
                this.Columns.Add(new System.Data.DataColumn("Id", typeof(string)));
                this.Columns.Add(new System.Data.DataColumn("ProductId", typeof(long)));
                this.Columns.Add(new System.Data.DataColumn("Price", typeof(System.Decimal)));
                this.Columns.Add(new System.Data.DataColumn("Quantity", typeof(long)));
                this.Columns.Add(new System.Data.DataColumn("OrderId", typeof(string)));
                this.Columns.Add(new System.Data.DataColumn("TaxId", typeof(long)));
            }
            
            internal void InitializeFields() {
                this.__columnId = this.Columns["Id"];
                this.__columnId.AllowDBNull = false;
                this.__columnId.AutoIncrementSeed = -1;
                this.__columnId.AutoIncrementStep = -1;
                this.__columnProductId = this.Columns["ProductId"];
                this.__columnPrice = this.Columns["Price"];
                this.__columnQuantity = this.Columns["Quantity"];
                this.__columnOrderId = this.Columns["OrderId"];
                this.__columnTaxId = this.Columns["TaxId"];
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                OrderDetailsDataTable t = ((OrderDetailsDataTable)(base.Clone()));
                t.InitializeFields();
                return t;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new OrderDetailsDataTable();
            }
            
            public virtual void AddOrderDetailsRow(OrderDetailsRow row) {
                this.Rows.Add(row);
            }
            
            public virtual OrderDetailsRow AddOrderDetailsRow(string Id, long ProductId, System.Decimal Price, long Quantity, string OrderId, long TaxId) {
                OrderDetailsRow row = this.NewOrderDetailsRow();
                row["Id"] = Id;
                row["ProductId"] = ProductId;
                row["Price"] = Price;
                row["Quantity"] = Quantity;
                row["OrderId"] = OrderId;
                row["TaxId"] = TaxId;
                this.Rows.Add(row);
                return row;
            }
            
            public virtual OrderDetailsRow NewOrderDetailsRow() {
                return ((OrderDetailsRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OrderDetailsRow(builder);
            }
            
            public virtual void RemoveOrderDetailsRow(OrderDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OrderDetailsRow);
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrderDetailsRowChanging != null)) {
                    this.OrderDetailsRowChanging(this, new OrderDetailsRowChangedEventArgs(((OrderDetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrderDetailsRowChanged != null)) {
                    this.OrderDetailsRowChanged(this, new OrderDetailsRowChangedEventArgs(((OrderDetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrderDetailsRowDeleting != null)) {
                    this.OrderDetailsRowDeleting(this, new OrderDetailsRowChangedEventArgs(((OrderDetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrderDetailsRowDeleted != null)) {
                    this.OrderDetailsRowDeleted(this, new OrderDetailsRowChangedEventArgs(((OrderDetailsRow)(e.Row)), e.Action));
                }
            }
        }
        
        public class OrderDetailsRow : System.Data.DataRow {
            
            private OrderDetailsDataTable tableOrderDetails;
            
            internal OrderDetailsRow(System.Data.DataRowBuilder builder) : 
                    base(builder) {
                this.tableOrderDetails = ((OrderDetailsDataTable)(this.Table));
            }
            
            public virtual string Id {
                get {
                    object ret = this[this.tableOrderDetails.IdColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((string)(ret));
                    }
                }
                set {
                    this[this.tableOrderDetails.IdColumn] = value;
                }
            }
            
            public virtual long ProductId {
                get {
                    object ret = this[this.tableOrderDetails.ProductIdColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((long)(ret));
                    }
                }
                set {
                    this[this.tableOrderDetails.ProductIdColumn] = value;
                }
            }
            
            public virtual System.Decimal Price {
                get {
                    object ret = this[this.tableOrderDetails.PriceColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((System.Decimal)(ret));
                    }
                }
                set {
                    this[this.tableOrderDetails.PriceColumn] = value;
                }
            }
            
            public virtual long Quantity {
                get {
                    object ret = this[this.tableOrderDetails.QuantityColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((long)(ret));
                    }
                }
                set {
                    this[this.tableOrderDetails.QuantityColumn] = value;
                }
            }
            
            public virtual string OrderId {
                get {
                    object ret = this[this.tableOrderDetails.OrderIdColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((string)(ret));
                    }
                }
                set {
                    this[this.tableOrderDetails.OrderIdColumn] = value;
                }
            }
            
            public virtual long TaxId {
                get {
                    object ret = this[this.tableOrderDetails.TaxIdColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((long)(ret));
                    }
                }
                set {
                    this[this.tableOrderDetails.TaxIdColumn] = value;
                }
            }
            
            public virtual OrdersRow OrdersRow {
                get {
                    return ((OrdersRow)(this.GetParentRow(this.Table.DataSet.Relations["FK_Orders_OrderDetails"])));
                }
                set {
                    this.SetParentRow(value, this.Table.DataSet.Relations["FK_Orders_OrderDetails"]);
                }
            }
            
            public virtual ProductsRow ProductsRow {
                get {
                    return ((ProductsRow)(this.GetParentRow(this.Table.DataSet.Relations["PK_Products_OrderDetails"])));
                }
                set {
                    this.SetParentRow(value, this.Table.DataSet.Relations["PK_Products_OrderDetails"]);
                }
            }
            
            public virtual TaxesRow TaxesRow {
                get {
                    return ((TaxesRow)(this.GetParentRow(this.Table.DataSet.Relations["PK_Taxes_OrderDetails"])));
                }
                set {
                    this.SetParentRow(value, this.Table.DataSet.Relations["PK_Taxes_OrderDetails"]);
                }
            }
            
            public virtual bool IsIdNull() {
                return this.IsNull(this.tableOrderDetails.IdColumn);
            }
            
            public virtual void SetIdNull() {
                this[this.tableOrderDetails.IdColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsProductIdNull() {
                return this.IsNull(this.tableOrderDetails.ProductIdColumn);
            }
            
            public virtual void SetProductIdNull() {
                this[this.tableOrderDetails.ProductIdColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsPriceNull() {
                return this.IsNull(this.tableOrderDetails.PriceColumn);
            }
            
            public virtual void SetPriceNull() {
                this[this.tableOrderDetails.PriceColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsQuantityNull() {
                return this.IsNull(this.tableOrderDetails.QuantityColumn);
            }
            
            public virtual void SetQuantityNull() {
                this[this.tableOrderDetails.QuantityColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsOrderIdNull() {
                return this.IsNull(this.tableOrderDetails.OrderIdColumn);
            }
            
            public virtual void SetOrderIdNull() {
                this[this.tableOrderDetails.OrderIdColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsTaxIdNull() {
                return this.IsNull(this.tableOrderDetails.TaxIdColumn);
            }
            
            public virtual void SetTaxIdNull() {
                this[this.tableOrderDetails.TaxIdColumn] = System.DBNull.Value;
            }
        }
        
        public class OrderDetailsRowChangedEventArgs : System.EventArgs {
            
            private OrderDetailsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public OrderDetailsRowChangedEventArgs(OrderDetailsRow r, System.Data.DataRowAction a) {
                this.eventRow = r;
                this.eventAction = a;
            }
            
            public OrderDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class PaymentsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn __columnId;
            
            private System.Data.DataColumn __columnName;
            
            private System.Data.DataColumn __columnAllowed;
            
            internal PaymentsDataTable() : 
                    base("Payments") {
                this.InitializeClass();
                this.InitializeFields();
            }
            
            internal PaymentsDataTable(System.Data.DataTable tablePayments) : 
                    base(tablePayments.TableName) {
                // TODO: implement
                throw new System.NotImplementedException();
            }
            
            public virtual int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public virtual PaymentsRow this[int i] {
                get {
                    return ((PaymentsRow)(this.Rows[i]));
                }
            }
            
            internal System.Data.DataColumn IdColumn {
                get {
                    return this.__columnId;
                }
            }
            
            internal System.Data.DataColumn NameColumn {
                get {
                    return this.__columnName;
                }
            }
            
            internal System.Data.DataColumn AllowedColumn {
                get {
                    return this.__columnAllowed;
                }
            }
            
            public event PaymentsRowChangedEventHandler PaymentsRowChanging;
            
            public event PaymentsRowChangedEventHandler PaymentsRowChanged;
            
            public event PaymentsRowChangedEventHandler PaymentsRowDeleting;
            
            public event PaymentsRowChangedEventHandler PaymentsRowDeleted;
            
            private void InitializeClass() {
                this.Columns.Add(new System.Data.DataColumn("Id", typeof(long)));
                this.Columns.Add(new System.Data.DataColumn("Name", typeof(string)));
                this.Columns.Add(new System.Data.DataColumn("Allowed", typeof(bool)));
            }
            
            internal void InitializeFields() {
                this.__columnId = this.Columns["Id"];
                this.__columnId.AllowDBNull = false;
                this.__columnId.AutoIncrement = true;
                this.__columnId.AutoIncrementSeed = -1;
                this.__columnId.AutoIncrementStep = -1;
                this.__columnName = this.Columns["Name"];
                this.__columnAllowed = this.Columns["Allowed"];
                this.__columnAllowed.AllowDBNull = false;
                this.__columnAllowed.DefaultValue = true;
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                PaymentsDataTable t = ((PaymentsDataTable)(base.Clone()));
                t.InitializeFields();
                return t;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new PaymentsDataTable();
            }
            
            public virtual void AddPaymentsRow(PaymentsRow row) {
                this.Rows.Add(row);
            }
            
            public virtual PaymentsRow AddPaymentsRow(long Id, string Name, bool Allowed) {
                PaymentsRow row = this.NewPaymentsRow();
                row["Id"] = Id;
                row["Name"] = Name;
                row["Allowed"] = Allowed;
                this.Rows.Add(row);
                return row;
            }
            
            public virtual PaymentsRow NewPaymentsRow() {
                return ((PaymentsRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PaymentsRow(builder);
            }
            
            public virtual void RemovePaymentsRow(PaymentsRow row) {
                this.Rows.Remove(row);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PaymentsRow);
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PaymentsRowChanging != null)) {
                    this.PaymentsRowChanging(this, new PaymentsRowChangedEventArgs(((PaymentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PaymentsRowChanged != null)) {
                    this.PaymentsRowChanged(this, new PaymentsRowChangedEventArgs(((PaymentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PaymentsRowDeleting != null)) {
                    this.PaymentsRowDeleting(this, new PaymentsRowChangedEventArgs(((PaymentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PaymentsRowDeleted != null)) {
                    this.PaymentsRowDeleted(this, new PaymentsRowChangedEventArgs(((PaymentsRow)(e.Row)), e.Action));
                }
            }
        }
        
        public class PaymentsRow : System.Data.DataRow {
            
            private PaymentsDataTable tablePayments;
            
            internal PaymentsRow(System.Data.DataRowBuilder builder) : 
                    base(builder) {
                this.tablePayments = ((PaymentsDataTable)(this.Table));
            }
            
            public virtual long Id {
                get {
                    object ret = this[this.tablePayments.IdColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((long)(ret));
                    }
                }
                set {
                    this[this.tablePayments.IdColumn] = value;
                }
            }
            
            public virtual string Name {
                get {
                    object ret = this[this.tablePayments.NameColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((string)(ret));
                    }
                }
                set {
                    this[this.tablePayments.NameColumn] = value;
                }
            }
            
            public virtual bool Allowed {
                get {
                    object ret = this[this.tablePayments.AllowedColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((bool)(ret));
                    }
                }
                set {
                    this[this.tablePayments.AllowedColumn] = value;
                }
            }
            
            public virtual bool IsIdNull() {
                return this.IsNull(this.tablePayments.IdColumn);
            }
            
            public virtual void SetIdNull() {
                this[this.tablePayments.IdColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsNameNull() {
                return this.IsNull(this.tablePayments.NameColumn);
            }
            
            public virtual void SetNameNull() {
                this[this.tablePayments.NameColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsAllowedNull() {
                return this.IsNull(this.tablePayments.AllowedColumn);
            }
            
            public virtual void SetAllowedNull() {
                this[this.tablePayments.AllowedColumn] = System.DBNull.Value;
            }
            
            public virtual OrdersRow[] GetOrdersRows() {
                return ((OrdersRow[])(this.GetChildRows(this.Table.DataSet.Relations["R_Payments_Orders"])));
            }
        }
        
        public class PaymentsRowChangedEventArgs : System.EventArgs {
            
            private PaymentsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public PaymentsRowChangedEventArgs(PaymentsRow r, System.Data.DataRowAction a) {
                this.eventRow = r;
                this.eventAction = a;
            }
            
            public PaymentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class MetaDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn __columnId;
            
            private System.Data.DataColumn __columnProperty;
            
            private System.Data.DataColumn __columnValue;
            
            internal MetaDataTable() : 
                    base("Meta") {
                this.InitializeClass();
                this.InitializeFields();
            }
            
            internal MetaDataTable(System.Data.DataTable tableMeta) : 
                    base(tableMeta.TableName) {
                // TODO: implement
                throw new System.NotImplementedException();
            }
            
            public virtual int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public virtual MetaRow this[int i] {
                get {
                    return ((MetaRow)(this.Rows[i]));
                }
            }
            
            internal System.Data.DataColumn IdColumn {
                get {
                    return this.__columnId;
                }
            }
            
            internal System.Data.DataColumn PropertyColumn {
                get {
                    return this.__columnProperty;
                }
            }
            
            internal System.Data.DataColumn ValueColumn {
                get {
                    return this.__columnValue;
                }
            }
            
            public event MetaRowChangedEventHandler MetaRowChanging;
            
            public event MetaRowChangedEventHandler MetaRowChanged;
            
            public event MetaRowChangedEventHandler MetaRowDeleting;
            
            public event MetaRowChangedEventHandler MetaRowDeleted;
            
            private void InitializeClass() {
                this.Columns.Add(new System.Data.DataColumn("Id", typeof(long)));
                this.Columns.Add(new System.Data.DataColumn("Property", typeof(string)));
                this.Columns.Add(new System.Data.DataColumn("Value", typeof(string)));
            }
            
            internal void InitializeFields() {
                this.__columnId = this.Columns["Id"];
                this.__columnId.AllowDBNull = false;
                this.__columnId.AutoIncrement = true;
                this.__columnId.AutoIncrementSeed = -1;
                this.__columnId.AutoIncrementStep = -1;
                this.__columnProperty = this.Columns["Property"];
                this.__columnValue = this.Columns["Value"];
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                MetaDataTable t = ((MetaDataTable)(base.Clone()));
                t.InitializeFields();
                return t;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new MetaDataTable();
            }
            
            public virtual void AddMetaRow(MetaRow row) {
                this.Rows.Add(row);
            }
            
            public virtual MetaRow AddMetaRow(long Id, string Property, string Value) {
                MetaRow row = this.NewMetaRow();
                row["Id"] = Id;
                row["Property"] = Property;
                row["Value"] = Value;
                this.Rows.Add(row);
                return row;
            }
            
            public virtual MetaRow NewMetaRow() {
                return ((MetaRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MetaRow(builder);
            }
            
            public virtual void RemoveMetaRow(MetaRow row) {
                this.Rows.Remove(row);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MetaRow);
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MetaRowChanging != null)) {
                    this.MetaRowChanging(this, new MetaRowChangedEventArgs(((MetaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MetaRowChanged != null)) {
                    this.MetaRowChanged(this, new MetaRowChangedEventArgs(((MetaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MetaRowDeleting != null)) {
                    this.MetaRowDeleting(this, new MetaRowChangedEventArgs(((MetaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MetaRowDeleted != null)) {
                    this.MetaRowDeleted(this, new MetaRowChangedEventArgs(((MetaRow)(e.Row)), e.Action));
                }
            }
        }
        
        public class MetaRow : System.Data.DataRow {
            
            private MetaDataTable tableMeta;
            
            internal MetaRow(System.Data.DataRowBuilder builder) : 
                    base(builder) {
                this.tableMeta = ((MetaDataTable)(this.Table));
            }
            
            public virtual long Id {
                get {
                    object ret = this[this.tableMeta.IdColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((long)(ret));
                    }
                }
                set {
                    this[this.tableMeta.IdColumn] = value;
                }
            }
            
            public virtual string Property {
                get {
                    object ret = this[this.tableMeta.PropertyColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((string)(ret));
                    }
                }
                set {
                    this[this.tableMeta.PropertyColumn] = value;
                }
            }
            
            public virtual string Value {
                get {
                    object ret = this[this.tableMeta.ValueColumn];
                    if ((ret == System.DBNull.Value)) {
                        throw new System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", null);
                    }
                    else {
                        return ((string)(ret));
                    }
                }
                set {
                    this[this.tableMeta.ValueColumn] = value;
                }
            }
            
            public virtual bool IsIdNull() {
                return this.IsNull(this.tableMeta.IdColumn);
            }
            
            public virtual void SetIdNull() {
                this[this.tableMeta.IdColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsPropertyNull() {
                return this.IsNull(this.tableMeta.PropertyColumn);
            }
            
            public virtual void SetPropertyNull() {
                this[this.tableMeta.PropertyColumn] = System.DBNull.Value;
            }
            
            public virtual bool IsValueNull() {
                return this.IsNull(this.tableMeta.ValueColumn);
            }
            
            public virtual void SetValueNull() {
                this[this.tableMeta.ValueColumn] = System.DBNull.Value;
            }
        }
        
        public class MetaRowChangedEventArgs : System.EventArgs {
            
            private MetaRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public MetaRowChangedEventArgs(MetaRow r, System.Data.DataRowAction a) {
                this.eventRow = r;
                this.eventAction = a;
            }
            
            public MetaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
